/************************************************************************
 * Copyright (C) 2020 SIS Research Ltd & Richard Palmer
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 ************************************************************************/

#include <AsymmetryVis.h>
#include <FaceTools/Action/ActionVisualise.h>
#include <FaceTools/Vis/ScalarVisualisation.h>
#include <FaceTools/FaceModel.h>
#include <r3d/Reflector.h>
#include <r3dvis/SurfaceMapper.h>
#include <sstream>
using FM = FaceTools::FM;
using FV = FaceTools::Vis::FaceView;
using FaceTools::Vis::ScalarVisualisation;
using FaceTools::Action::Event;

namespace {

class AsymmetryVisualisation : public ScalarVisualisation
{
public:
    AsymmetryVisualisation( const std::string& label, float minv, float maxv)
        : ScalarVisualisation( label, false/*vertex data*/, minv, maxv)
    {
        setVisibleRange( minv/2, maxv/2);
        setNumColours( 25);
        rebuild();
    }   // end ctor

    const char *name() const override { return "AsymmetryVisualisation";}

protected:
    vtkSmartPointer<vtkFloatArray> mapMetrics( const FV *fv) override
    {
        const FM *fm = fv->data();
        fm->lockForRead();
        const r3d::Mesh &mesh = fm->mesh();
        const r3d::KDTree &kdt = fm->kdtree();

        const r3d::SurfacePointFinder spfinder( mesh);

        r3d::Vec3f rpt = r3d::Vec3f::Zero();
        r3d::Vec3f rvec(1,0,0);
        if ( fm->hasLandmarks())
        {
            const r3d::Mat4f T = fm->currentLandmarks().alignment();
            rvec = T.block<3,1>(0,0);
            rpt = T.block<3,1>(0,3);
        }   // end if

        const r3dvis::SurfaceMapper smapper( [&]( int vidx, size_t){
            const r3d::Vec3f p = mesh.vtx(vidx);   // Original vertex
            const r3d::Vec3f r = r3d::Reflector::reflectPoint( p, rpt, rvec);  // Mirror the vertex through the median plane

            const int svidx = kdt.find( r);  // Closest vertex on surface to r
            const r3d::Vec3f g = spfinder.find( r, svidx);   // Find g as the closest point on surface to r

            // Get the sign of the difference as indicating if the mirrored point on the
            // surface is further out (positive) or closer in (negative).
            const float sgn = (p - g).squaredNorm() > (p - r).squaredNorm() ? -1 : 1;
            const float diff = (r - g).norm() / 2; // Difference is halved because this is a comparison with the pseudo "mean" face.
            assert( !std::isnan(diff));
            return sgn * diff;    // Disparity of surface to reflected point
            }, false, 1);

        vtkSmartPointer<vtkFloatArray> arr = smapper.makeArray( mesh, mesh.hasMaterials());
        fm->unlock();
        return arr;
    }   // end mapMetrics
};  // end class

}   // end namespace


using Cliniface::AsymmetryVis;


class VisAction : public FaceTools::Action::ActionVisualise
{
public:
    VisAction( AsymmetryVisualisation *sv, const QIcon& i) : ActionVisualise( sv->label(), i, sv)
    {
        addPurgeEvent( Event::GEOMETRY_CHANGE | Event::ALIGNMENT_CHANGE);
    }   // end ctor

    QString attachToMenu() override { return "Surface Mapping";}
    QString attachToToolBar() override { return "Surface Mapping";}
};  // end VisAction


AsymmetryVis::AsymmetryVis()
{
    const QString nm = "Asymmetry (" + FM::LENGTH_UNITS + ")";
    AsymmetryVisualisation *sv = new AsymmetryVisualisation( nm.toStdString(), -10, 10);
    appendPlugin( new VisAction( sv, QIcon(":/icons/SYMMETRY")));
}   // end ctor
